
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000606  00000000  00000000  00000a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_7>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	9f 00       	.word	0x009f	; ????
  56:	bf 00       	.word	0x00bf	; ????
  58:	a1 00       	.word	0x00a1	; ????
  5a:	a3 00       	.word	0x00a3	; ????
  5c:	a5 00       	.word	0x00a5	; ????
  5e:	a7 00       	.word	0x00a7	; ????
  60:	a9 00       	.word	0x00a9	; ????
  62:	ab 00       	.word	0x00ab	; ????
  64:	ad 00       	.word	0x00ad	; ????
  66:	af 00       	.word	0x00af	; ????
  68:	b1 00       	.word	0x00b1	; ????
  6a:	b3 00       	.word	0x00b3	; ????
  6c:	b5 00       	.word	0x00b5	; ????
  6e:	b7 00       	.word	0x00b7	; ????
  70:	b9 00       	.word	0x00b9	; ????
  72:	bb 00       	.word	0x00bb	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a2 36       	cpi	r26, 0x62	; 98
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  94:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <__vector_7>:
}

/*//////////////////////////////////////////////////
/			FUNCIONES DE INTERRUPCION
//////////////////////////////////////////////////*/
ISR(TIMER1_COMPA_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
	ADCSRA|=1<<ADSC;	
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	86 b9       	out	0x06, r24	; 6
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_16>:
ISR(ADC_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
	//el valor del registro ADC(ADCH y ADCL) solo puede ser leido una vez cada conversion
	uint16_t lecturaADC=ADC;
  d4:	24 b1       	in	r18, 0x04	; 4
  d6:	35 b1       	in	r19, 0x05	; 5
	uint8_t valorAjustado=lecturaADC/11;
  d8:	af e2       	ldi	r26, 0x2F	; 47
  da:	ba eb       	ldi	r27, 0xBA	; 186
  dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__umulhisi3>
  e0:	96 95       	lsr	r25
  e2:	87 95       	ror	r24
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
	uint8_t decenas=valorAjustado/10;
  ec:	9d ec       	ldi	r25, 0xCD	; 205
  ee:	89 9f       	mul	r24, r25
  f0:	91 2d       	mov	r25, r1
  f2:	11 24       	eor	r1, r1
  f4:	96 95       	lsr	r25
  f6:	96 95       	lsr	r25
  f8:	96 95       	lsr	r25
	uint8_t unidades=valorAjustado%10;
  fa:	39 2f       	mov	r19, r25
  fc:	33 0f       	add	r19, r19
  fe:	23 2f       	mov	r18, r19
 100:	22 0f       	add	r18, r18
 102:	22 0f       	add	r18, r18
 104:	23 0f       	add	r18, r19
 106:	38 2f       	mov	r19, r24
 108:	32 1b       	sub	r19, r18
	display0=unidades;
 10a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <display0>
	display1=decenas;
 10e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <bcd_2_7seg>:
////////////////BCD to 7seg//////////////////

uint8_t bcd_2_7seg(uint8_t bcd){
	
  uint8_t display7Seg=0;
  switch (bcd){
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	91 05       	cpc	r25, r1
 132:	18 f5       	brcc	.+70     	; 0x17a <bcd_2_7seg+0x4e>
 134:	fc 01       	movw	r30, r24
 136:	e6 5d       	subi	r30, 0xD6	; 214
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__tablejump2__>
	case 0:	display7Seg=0b00111111;
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	08 95       	ret
			break;
	case 1:	display7Seg=0b00000110;
			break;
	case 2:	display7Seg=0b01011011;
 142:	8b e5       	ldi	r24, 0x5B	; 91
			break;
 144:	08 95       	ret
	case 3:	display7Seg=0b01001111;
 146:	8f e4       	ldi	r24, 0x4F	; 79
			break;
 148:	08 95       	ret
	case 4:	display7Seg=0b01100110;
 14a:	86 e6       	ldi	r24, 0x66	; 102
			break;
 14c:	08 95       	ret
	case 5:	display7Seg=0b01101101;
 14e:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 150:	08 95       	ret
	case 6:	display7Seg=0b01111101;
 152:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 154:	08 95       	ret
	case 7:	display7Seg=0b00000111;
 156:	87 e0       	ldi	r24, 0x07	; 7
			break;
 158:	08 95       	ret
	case 8:	display7Seg=0b01111111;
 15a:	8f e7       	ldi	r24, 0x7F	; 127
			break;
 15c:	08 95       	ret
	case 9:	display7Seg=0b01101111;
 15e:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 160:	08 95       	ret
	case 10:display7Seg=0b01110111;
 162:	87 e7       	ldi	r24, 0x77	; 119
			break;
 164:	08 95       	ret
	case 11:display7Seg=0b01111100;
 166:	8c e7       	ldi	r24, 0x7C	; 124
			break;
 168:	08 95       	ret
	case 12:display7Seg=0b00111001;
 16a:	89 e3       	ldi	r24, 0x39	; 57
			break;
 16c:	08 95       	ret
	case 13:display7Seg=0b01011110;
 16e:	8e e5       	ldi	r24, 0x5E	; 94
			break;
 170:	08 95       	ret
	case 14:display7Seg=0b01111001;
 172:	89 e7       	ldi	r24, 0x79	; 121
			break;
 174:	08 95       	ret
	case 15:display7Seg=0b01110001;
 176:	81 e7       	ldi	r24, 0x71	; 113
			break;
 178:	08 95       	ret
	default:display7Seg=0b00000000;
 17a:	80 e0       	ldi	r24, 0x00	; 0
			break;
 17c:	08 95       	ret
	
  uint8_t display7Seg=0;
  switch (bcd){
	case 0:	display7Seg=0b00111111;
			break;
	case 1:	display7Seg=0b00000110;
 17e:	86 e0       	ldi	r24, 0x06	; 6
	default:display7Seg=0b00000000;
			break;
  }
  return display7Seg;
   
 180:	08 95       	ret

00000182 <main>:
			0000_0001
	or		XXXX_XXX1
	ddrb <= XXXX_XXX1
	*/
	/* Blink with interrupt */
	sei();
 182:	78 94       	sei
	DDRB =0b11111111;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	87 bb       	out	0x17, r24	; 23
	DDRD =0b00000011;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	81 bb       	out	0x11, r24	; 17
	//config del ADC
	ADCSRA|=1<<ADEN|1<<ADIE|1<<ADPS2|1<<ADPS1|1<<ADPS0;
 18c:	86 b1       	in	r24, 0x06	; 6
 18e:	8f 68       	ori	r24, 0x8F	; 143
 190:	86 b9       	out	0x06, r24	; 6
	ADMUX|= 1<<REFS1|1<<REFS0;
 192:	87 b1       	in	r24, 0x07	; 7
 194:	80 6c       	ori	r24, 0xC0	; 192
 196:	87 b9       	out	0x07, r24	; 7
	
	//config para prescalador de 8
	TCCR1B |= 1<<CS11 | 1<<WGM12;
 198:	8e b5       	in	r24, 0x2e	; 46
 19a:	8a 60       	ori	r24, 0x0A	; 10
 19c:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=1<<OCIE1A;
 19e:	89 b7       	in	r24, 0x39	; 57
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	89 bf       	out	0x39, r24	; 57
	//valor para un retardo de 0.1s
	OCR1A =6249;
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	9b bd       	out	0x2b, r25	; 43
 1aa:	8a bd       	out	0x2a, r24	; 42
	
	while(1){
		PORTB=bcd_2_7seg(display0);
 1ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <display0>
 1b0:	0e 94 96 00 	call	0x12c	; 0x12c <bcd_2_7seg>
 1b4:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00000001;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8f ec       	ldi	r24, 0xCF	; 207
 1bc:	97 e0       	ldi	r25, 0x07	; 7
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x3c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x42>
 1c4:	00 00       	nop
		_delay_ms(8);
		PORTB=bcd_2_7seg(display1);
 1c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	0e 94 96 00 	call	0x12c	; 0x12c <bcd_2_7seg>
 1ce:	88 bb       	out	0x18, r24	; 24
		PORTD=0b00000010;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	8f ec       	ldi	r24, 0xCF	; 207
 1d6:	97 e0       	ldi	r25, 0x07	; 7
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x56>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x5c>
 1de:	00 00       	nop
 1e0:	e5 cf       	rjmp	.-54     	; 0x1ac <main+0x2a>

000001e2 <__tablejump2__>:
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	05 90       	lpm	r0, Z+
 1e8:	f4 91       	lpm	r31, Z
 1ea:	e0 2d       	mov	r30, r0
 1ec:	09 94       	ijmp

000001ee <__umulhisi3>:
 1ee:	a2 9f       	mul	r26, r18
 1f0:	b0 01       	movw	r22, r0
 1f2:	b3 9f       	mul	r27, r19
 1f4:	c0 01       	movw	r24, r0
 1f6:	a3 9f       	mul	r26, r19
 1f8:	70 0d       	add	r23, r0
 1fa:	81 1d       	adc	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	91 1d       	adc	r25, r1
 200:	b2 9f       	mul	r27, r18
 202:	70 0d       	add	r23, r0
 204:	81 1d       	adc	r24, r1
 206:	11 24       	eor	r1, r1
 208:	91 1d       	adc	r25, r1
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
